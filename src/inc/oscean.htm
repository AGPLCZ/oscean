<h3>Indental</h3>

<p>Indental is a <b>dictionary-type database format</b>. This space-sensitive database format is designed to store a dictionary of elements, accessible by name. The <a href='https://github.com/hundredrabbits/Libraries/blob/master/scripts/lib/indental.js'>parser</a> is a mere 50 lines, and allows for human-readable data structures for static APIs. In the Indental file, an unindented line declares the key to a new root node, children lines can associate either parameters or lists to their parent node, a line divided with a colon will associate a value to a parameter to the parent node, and a sequence of equally indented lines will append to a list. You can download syntax highlight <a href='https://github.com/hundredrabbits/Libraries/blob/master/tools/ndtl.sublime-syntax'>here</a>.</p>

<pre>
NAME
&nbsp;&nbsp;KEY &#58; VALUE
&nbsp;&nbsp;LIST
&nbsp;&nbsp;&nbsp;&nbsp;ITEM1
&nbsp;&nbsp;&nbsp;&nbsp;ITEM2
<comment>Or, &#123;NAME:&#123;KEY:VALUE,LIST:[ITEM1,ITEM2])&#125;</comment>
</pre>

<h3>Tablatal</h3>

<p>Tablatal is a <b>list-type database format</b>. This space-sensitive database format is designed to store a list of elements of the same length, accessible by id. The <a href='https://github.com/hundredrabbits/Libraries/blob/master/scripts/lib/tablatal.js'>parser</a> is 30 lines long, and allows for human-readable data structures for static APIs. In the Tablatal file, the first line declares the key, the spacing between each key defines the length of the parameters for all subsequent lines. You can download syntax highlight <a href='https://github.com/hundredrabbits/Libraries/blob/master/tools/tbtl.sublime-syntax'>here</a>.</p>

<pre>
NAME    AGE   COLOR
Erica   12    Opal
Alex    23    Cyan
Nike    34    Red
Ruca    45    Grey
<comment>Or, [&#123;name:Erica,Age:12,Color:Blue&#125;,&#123;name:Alex,Age..&#125;</comment>
</pre>

<h3>Runic</h3>

<p>Runic is a <b>templating format</b>, a first order templating language operating on arrays of strings. Where each one is prefixed by a rune, giving a sense of the data being handled. </p>

<pre>
* Header
& Paragraph
- List Element 1
- List Element 2
| table | row1
| table | row2
# <comment>-- CODE BLOCK</comment>
> <comment>-- HTML BLOCK</comment>
λ <comment>-- {(link "LAIN")} BLOCK</comment>
</pre>

<h3>Lain</h3>

<p>Lain is a <b>LISP dialect</b>, it is both an inline scripting library that allows for complex templating of the wiki pages, and a programming language that exists at the core of the engine to load and parse content for each article. The Lain parser can also be found in the Ronin and Paradise applications.</p>

<h4>Templating With Lain</h4>

<pre>
(link "home")                             {(link "home")}
(link "home" "local")                     {(link "home" "local")}
(link "https://github.com/")              {(link "https://github.com/")}
(link "https://github.com/" "external")   {(link "https://github.com/" "external")}
(bold "bold")                             {(bold "bold")}
(ital "italic")                           {(ital "italic")}
(bold (link "home" "bold link"))          {(bold (link "home" "bold link"))}
</pre>

<h4>Programming With Lain</h4>

<pre>
(add (sub 5 3) 2)                         ; Basic Math
(λ (a b c) (concat a b c))                ; Lambda
(def obj:foo "bar")                       ; Creating object
(obj:foo)                                 ; Reading object parameters
(def _sidebar (dom:create "sidebar"))     ; Creating DOM elements
</pre>
