<h3>Primitives</h3>

<table border='1'>
  <tr><td>create </td><td> become </td><td> enter </td><td> leave</td></tr>
  <tr><td>look   </td><td> take   </td><td> drop  </td><td> move</td></tr>
  <tr><td>learn  </td><td> warp   </td><td> use   </td><td> edit</td></tr>
</table>

<p>The goal of this project is to distribute a lightweight operating system that would serve a environment able to <a href='https://twitter.com/neauoire/status/1042644335689261058' class='external'>navigate the file system</a>, run code and exchange content with other Parade instances, via the basic primitives.

<pre>
create a machine
> |
</pre>

<p>There are no \"users\", \"files\" or \"applications\", in this operating system, everything is an operable \"vessel\". A <b>vessel</b> is an <i>object</i> that can act onto other vessels, it has its own permissions. Users are not different from applications or files. A <i>user</i>, is a vessel being acted upon, possibly containing other vessels. A <i>file</i> is an inert vessel, that has no applicable actions to itself but may contain text data accessible via the primitives.</p>

<pre>
enter the machine
> |
</pre>

<p>A new vessel responds to the basic primitives, and visible vessels might append to that list with actions of their own. The vessel format serves endpoints that responds to actions. For instance, an telephone vessel, might respond to the action <i>call</i>, as in the command \"call Alice\".</p>
<p>There is no linear hierarchy tree, instead vessels can be within themselves or each other, or even organized in the shape of a loop. Pockets of space can be hosts to vessels existing around a common purpose, or carried around inside another vessel as you would a tool-belt or an inventory, giving the acting vessel, or <i>user</i>, additional actions appended to the list of primitives.</p>

<pre>
become the machine
> |
</pre>

<p>One of the goals of this operating system is to be <b>fully operable by voice</b>, think <i>screenless computing</i>. The navigation is designed to be used via simple text commands, there would be nothing quite like windows. Vessels could display passive content when in sight, allowing to create a form of procedural user interface, but the system itself does not have a concept of windows, like you would in a typical graphical operating system with a wm.</p>
<p>While the navigation of the system can be done by voice alone, the terminal, when presented on a screen, begins with a <b>prompt</b>, to which can be appended a <b>history of responses</b>, or even a <b>display area for graphics</b> when a vessel is serving a game or a movie.</p>

<pre>
use the machine
> |
</pre>

<p>At its core the system should be <b>single-threaded</b>, and operate a single frame, or a <i>state</i>, of the world at a time. While passive responses of visible vessels might allow for a kind of oversight, the user experience as a terminal, and down to its functioning should not allow for multi-tasking.</p>
<p>The creation of application vessels, think for instance a <i>drawing application</i>, would be built with the LISP dialect of Parade, which is itself built with that same language. — Making the entire operating system existing it inself as a vessel, editable, changeable, operable and navigable.</p>

<pre>
warp to the lobby@29:03:25:76
> |
</pre>

<p>A <b>Network of Parade systems</b> would be traversible(read-only) by an acting vessel. The Parade's typical behaviours for moving about will persist onto the remote systems so, a vessel can move, enter, use remote vessels and suggest changes to the host world as commits — All the while, respecting the host's vessel permissions. For instance, a vessel might make itself usable by a visiting vessel, but will not let itself be moved or altered.</p>
