#include <stdio.h>

#define SSZ 256
#define QSZ 32

typedef struct Fraction {
	int num;
	int den;
} Fraction;

typedef struct Stack {
	Fraction data[SSZ];
	int len;
} Stack;

typedef struct Query {
	char data[QSZ];
	int len;
} Query;

/* helpers */

int
cinu(char c)
{
	return c >= '0' && c <= '9';
}

int
sinu(char *s)
{
	int i = 0;
	if(!s[0])
		return 0;
	while(s[i])
		if(!cinu(s[i++]))
			return 0;
	return 1;
}

int
sint(char *s)
{
	int i = 0, num = 0;
	while(s[i] && cinu(s[i]))
		num = num * 10 + (s[i++] - '0');
	return num;
}

int
scmp(char *a, char *b)
{
	int i = 0;
	while(a[i] == b[i])
		if(!a[i++])
			return 1;
	return 0;
}

int
gcd(int a, int b)
{
	if(b == 0)
		return a;
	return gcd(b, a % b);
}

void
init(Query *s)
{
	s->data[0] = '\0';
	s->len = 0;
}

void
append(Query *s, char c)
{
	if(s->len < QSZ)
		s->data[s->len++] = c;
	s->data[s->len] = '\0';
}

Fraction *
reduce(Fraction *f)
{
	int d = gcd(f->num, f->den);
	f->num /= d;
	f->den /= d;
	return f;
}

/* rpn */

int
error(char *err)
{
	printf("Error: %s\n", err);
	return 0;
}

int
trypop(Stack *s, int len)
{
	int err = s->len - len < 0;
	if(err)
		error("Stack underflow");
	return !err;
}

int
trypush(Stack *s, int len)
{
	int err = s->len + len >= SSZ;
	if(err)
		error("Stack overflow");
	return !err;
}

Fraction
pop(Stack *s)
{
	return s->data[--s->len];
}

Fraction *
push(Stack *s, int num, int den)
{
	s->data[s->len].num = num;
	s->data[s->len].den = den;
	return reduce(&s->data[s->len++]);
}

void
print(Stack *s, int decimals)
{
	int i;
	if(s->len < 1)
		return;
	for(i = 0; i < s->len; ++i) {
		if(decimals)
			printf("%.4f", s->data[i].num / (double)s->data[i].den);
		else if(s->data[i].den != 1)
			printf("%d/%d ", s->data[i].num, s->data[i].den);
		else
			printf("%d ", s->data[i].num);
	}
	printf("\n");
}

/* ops */

void
request(Stack *s, char *qd)
{
	if(qd[0] == ' ' || qd[0] == '.' || qd[0] == '\0')
		print(s, 0);
	else if(qd[0] == '!')
		print(s, 1);
	else if(sinu(qd) && trypush(s, 1))
		push(s, sint(qd), 1);
	else if(scmp(qd, "pop") && trypop(s, 1))
		pop(s);
	else if(scmp(qd, "dup") && trypop(s, 1) && trypush(s, 1)) {
		Fraction b = pop(s);
		push(s, b.num, b.den);
		push(s, b.num, b.den);
	} else if(scmp(qd, "swp") && trypop(s, 2)) {
		Fraction b = pop(s);
		Fraction a = pop(s);
		push(s, b.num, b.den);
		push(s, a.num, a.den);
	} else if((scmp(qd, "add") || qd[0] == '+') && trypop(s, 2)) {
		Fraction b = pop(s);
		Fraction a = pop(s);
		push(s, (a.num * b.den) + (a.den * b.num), a.den * b.den);
	} else if((scmp(qd, "sub") || qd[0] == '-') && trypop(s, 2)) {
		Fraction b = pop(s);
		Fraction a = pop(s);
		push(s, (a.num * b.den) - (a.den * b.num), a.den * b.den);
	} else if((scmp(qd, "mul") || qd[0] == '*') && trypop(s, 2)) {
		Fraction b = pop(s);
		Fraction a = pop(s);
		push(s, a.num * b.num, a.den * b.den);
	} else if((scmp(qd, "div") || qd[0] == '/') && trypop(s, 2)) {
		Fraction b = pop(s);
		Fraction a = pop(s);
		push(s, a.num * b.den, a.den * b.num);
	}
}

int
run(Stack *s)
{
	char c;
	Query q;
	init(&q);
	while((c = fgetc(stdin)) != EOF) {
		if(c == ' ' || c == '\n' || !c) {
			request(s, q.data);
			init(&q);
		} else
			append(&q, c);
	}
	return 0;
}

int
main()
{
	Stack s;
	s.len = 0;
	while(run(&s))
		;
	print(&s, 0);
	return 0;
}