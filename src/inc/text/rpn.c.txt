#include <stdio.h>

typedef struct Stack {
	short data[255];
	unsigned short len;
} Stack;

/* helpers */

int
cinu(char c)
{
	return c >= '0' && c <= '9';
}

int
sinu(char *s)
{
	int i = 0;
	if(s[0] == '\0')
		return 0;
	while(s[i] != '\0')
		if(!cinu(s[i++]))
			return 0;
	return 1;
}

int
sint(char *s)
{
	int i = 0, num = 0;
	while(s[i] && cinu(s[i]))
		num = num * 10 + (s[i++] - '0');
	return num;
}

int
scmp(char *a, char *b)
{
	int i = 0;
	while(a[i] == b[i])
		if(a[i++] == '\0')
			return 1;
	return 0;
}

/* rpn */

int
push(Stack *s, int v)
{
	if(s->len >= 255)
		return 1;
	s->data[s->len++] = v;
	return 0;
}

int
pop(Stack *s)
{
	return s->data[--s->len];
}

void
print(Stack *s)
{
	int i;
	for(i = 0; i < s->len; ++i)
		printf(" %d |", s->data[i]);
	printf("\n");
}

/* ops */

int
add(Stack *s)
{
	if(s->len < 2)
		return 1;
	while(s->len > 1)
		push(s, pop(s) + pop(s));
	return 0;
}

int
sub(Stack *s)
{
	if(s->len < 2)
		return 1;
	while(s->len > 1)
		push(s, -pop(s) + pop(s));
	return 0;
}

int
mul(Stack *s)
{
	if(s->len < 2)
		return 1;
	while(s->len > 1)
		push(s, pop(s) * pop(s));
	return 0;
}

int
div(Stack *s)
{
	if(s->len < 2)
		return 1;
	push(s, pop(s) / pop(s));
	return 0;
}

int
run(Stack *s, char *q)
{
	int err = 0;
	if(sinu(q))
		err = push(s, sint(q));
	else if(scmp(q, "add") || q[0] == '+')
		err = add(s);
	else if(scmp(q, "sub") || q[0] == '-')
		err = sub(s);
	else if(scmp(q, "mul") || q[0] == '*')
		err = mul(s);
	else if(scmp(q, "div") || q[0] == '/')
		err = div(s);
	if(err) {
		printf("Stack underflow: %s:%d\n", q, pop(s));
		return 1;
	}
	return 0;
}

void
load(FILE *f, Stack *s)
{
	char c, q[256];
	int i, qlen;
	if(!f)
		return;
	qlen = 0;
	while((c = fgetc(f)) != EOF) {
		if(c == ' ' || c == '\n' || c == '\0') {
			run(s, q);
			qlen = 0;
			q[0] = '\0';
		} else {
			q[qlen++] = c;
			q[qlen] = '\0';
		}
		i++;
	}
	fclose(f);
}

int
main(int argc, char **argv)
{
	Stack s;
	if(argc < 2)
		return 0;
	load(fopen(argv[1], "r"), &s);
	printf("Result: %d\n", pop(&s));
	return 0;
}