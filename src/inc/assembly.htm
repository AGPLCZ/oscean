<h3>Basics</h3>

<ul>
  <li><b>Bit</b>: The smallest unit in computers. It is either a 1 or a 0.</li>
  <li><b>Nibble</b>: Half a byte, or 4 bites. </li>
  <li><b>Byte</b>: 8 bits together form one byte, a number from 0 to 255.  Bits in the byte are numbered starting from the right at 0.</li>
  <li><b>Short</b>: Two bytes put together is 16 bits, forming a number from 0 to 65535. The low byte is the rightmost eight bits.</li>
  <li><b>Hex Number</b>: A HEX number consisting of 4 numbers is 16-bit.</li>
</ul>  

<h3>Registers</h3>

<p>The 6502 handles data in its registers, each of which holds one byte(8-bits) of data. There are a total of three general use and two special purpose registers:</p>
<p><b>Note:</b> When you use X it adds the value of X to the memory address and uses the 16-bit value at that address to do the write. Whereas when you use Y it adds the value of Y to the address stored in the memory address it's reading from instead. 6502 is little-endian, so $0200 is stored as $00 $02 in memory.</p>

<ul>
  <li><b>A</b>: The accumulator handles all arithmetic and logic. The real heart of the system..</li>
  <li><b>X&Y</b>: General purpose registers with limited abilities..</li>
  <li><b>SP</b>: The stack pointer is decremented every time a byte is pushed onto the stack, and incremented when a byte is popped off the stack..</li>
  <li><b>PC</b>: The program counter is how the processor knows at what point in the program it currently is. Itâ€™s like the current line number of an executing script. In the JavaScript simulator the code is assembled starting at memory location $0600, so PC always starts there..</li>
  <li><b>PF</b>: The Processor flag contains 7 bytes, each flag live in a single byte. The flags are set by the processor to give information about the previous instruction. More on that later. Read more about the registers and flags here..</li>
</ul>

<h3>NES System Architecture</h3>

<p>The NES screen resolution is 256x240. </p>
<ul>
  <li><b>ROM</b>: Read Only Memory, holds data that cannot be changed. This is where the game code or graphics is stored on the cart..</li>
  <li><b>RAM</b>: Random Access Memory, holds data that can be read and written. When power is removed, the chip is erased. A battery can be used to keep power and data valid..</li>
  <li><b>PRG</b>: Program memory, the code for the game.</li>
  <li><b>CHR</b>: Character memory, the data for graphics.</li>
  <li><b>CPU</b>: Central Processing Unit, the main processor chip.</li>
  <li><b>PPU</b>: Picture Processing Unit, the graphics chip.</li>
  <li><b>APU</b>: Audio Processing Unit, the sound chip inside the CPU.</li>
</ul>

<h3>Addressing</h3>

<p>The 6502 has 9 major(13 in total) addressing modes, or ways of accessing memory.</p>

<table border='1'>
  <tr><td width='125'>Immediate</td><td>#aa</td><td>The value given is a number to be used immediately by the instruction.  For example, LDA #$99 loads the value $99 into the accumulator.</td></tr>
  <tr><td>Absolute</td><td>aaaa</td><td>The value given is the address (16-bits) of a memory location that contains the 8-bit value to be used.  For example, STA $3E32 stores the present value of the accumulator in memory location $3E32.</td></tr>
  <tr><td>Zero Page</td><td>aa</td><td>The first 256 memory locations ($0000-00FF) are called "zero page".  The next 256 instructions ($0100-01FF) are page 1, etc.  Instructions making use of the zero page save memory by not using an extra $00 to indicate the high part of the address.</td></tr>
  <tr><td>Implied</td><td></td><td>Many instructions are only one byte in length and do not reference memory. These are said to be using implied addressing. For example, CLC, DEX & TYA.</td></tr>
  <tr><td>Indirect Absolute</td><td>(aaaa)</td><td>Only used by JMP (JuMP).  It takes the given address and uses it as a pointer to the low part of a 16-bit address in memory, then jumps to that address.  For example, JMP ($2345) or, jump to the address in $2345 low and $2346 high</td></tr>
  <tr><td>Absolute Indexed,X/Y</td><td>aaaa,X</td><td>The final address is found by taking the given address as a base and adding the current value of the X or Y register to it as an offset.  So, LDA $F453,X  where X contains 3 Load the accumulator with the contents of address $F453 + 3 = $F456.</td></tr>
  <tr><td>Zero Page Indexed,X/Y</td><td>aa,X</td><td>Same as Absolute Indexed but the given address is in the zero page thereby saving a byte of memory.</td></tr>
  <tr><td>Indexed Indirect</td><td>(aa,X)</td><td>Find the 16-bit address starting at the given location plus the current X register.  The value is the contents of that address.  For example, LDA ($B4,X)  where X contains 6 gives an address of $B4 + 6 = $BA.  If $BA and $BB contain $12 and $EE respectively, then the final address is $EE12.  The value at location $EE12 is put in the accumulator.</td></tr>
  <tr><td>Indirect Indexed</td><td>(aa),Y</td><td>Find the 16-bit address contained in the given location ( and the one following).  Add to that address the contents of the Y register. Fetch the value stored at that address.  For example, LDA ($B4),Y  where Y contains 6 If $B4 contains $EE and $B5 contains $12 then the value at memory location $12EE + Y (6) = $12F4 is fetched and put in the accumulator.</td></tr>
</table>

<h3>6502 Processor Overview</h3>

<table border='1'>
  <tr><td>$0000-0800</td><td colspan='2'>Internal RAM, 2KB chip in the NES</td></tr>
  <tr><td rowspan='10'>$2000-2007</td><td colspan='2'>PPU access ports</td></tr>
  <tr><td>$2000</td><td>PPUCTRL</td></tr>
  <tr><td>$2001</td><td>PPUMASK</td></tr>
  <tr><td>$2002</td><td>PPUSTATUS</td></tr>
  <tr><td>$2002</td><td>PPUSTAT</td></tr>
  <tr><td>$2003</td><td>SPRADDR</td></tr>
  <tr><td>$2003</td><td>OAMADDR</td></tr>
  <tr><td>$2005</td><td>PPUSCROLL</td></tr>
  <tr><td>$2006</td><td>PPUADDR</td></tr>
  <tr><td>$2007</td><td>PPUDATA</td></tr>
  <tr><td rowspan='6'>$4000-4017</td><td colspan='2'>Audio and controller access ports</td></tr>
  <tr><td>$4014</td><td>SPRDMA</td></tr>
  <tr><td>$4014</td><td>OAMDMA</td></tr>
  <tr><td>$4015</td><td>SNDCHN</td></tr>
  <tr><td>$4016</td><td>JOY1</td></tr>
  <tr><td>$4017</td><td>JOY2</td></tr>
  <tr><td>$6000-7FFF</td><td colspan='2'>Optional WRAM inside the game cart</td></tr>
  <tr><td>$8000-FFFF</td><td colspan='2'>Game cart ROM</td></tr>
</table>

<h3>Backgrounds</h3>

<p>To make graphics on the screen you must write graphic data to the PPU memory, but you can't write directly to PPU memory, you have to use PPU ports $2006 and $2007. By using $2006 you declare the address of PPU memory then by using $2007 you write the desired value to that address, PPU Memory addresses are 16bit starting from $0000 ~ $3FFF (4KB). So you need to write twice to $2006 to declare it's address, the first write declares high byte of address, the second write declares the low byte of address.</p>

<pre>
  LDA #$20   ; y
  STA $2006
  LDA #$00   ; x
  STA $2006
  LDA #$04   ; sprite-id
  STA $2007
</pre>

<p>Each time you write a value to $2007, the PPU address is automatically adjusted to the next address, so you don't need to declare the PPU address with $2006 for sequential PPU memory addresses. Calculate at what address to draw it: $2000 plus 32 times the vertical position of the tile (in 8-pixel units) plus the horizontal position of the tile (in 8-pixel units), write the high byte of the address to $2006: this is usually values $20 to $23, and write the low byte of the address to $2006. In other words, calculate the tile offset (TileY * 32 + TileX) and then add the base address. This will give you a pointer you can use to access any part of the map.</p>

<h3>Directives</h3>

<p>Directives are commands you send to the assembler to do things like locating code in memory. They start with . and are indented. This sample directive tells the assembler to put the code starting at memory location $8000, which is inside the game ROM area:</p>

<pre>
  .org $8000
</pre>

<h3>Labels</h3>

<p>The label is aligned to the far left and has a : at the end. The label is just something you use to organize your code and make it easier to read. The assembler translates the label into an address. Sample label:</p>

<pre>
  .org $8000
MyFunction:
</pre>

<h3>Opcodes</h3>

<p>The opcode is the instruction that the processor will run, and is indented like the directives. In this sample, JMP is the opcode that tells the processor to jump to the MyFunction label:</p>

<pre>
  .org $8000
MyFunction:
  JMP MyFunction
</pre>

<h3>Operands</h3>

<p>The operands are additional information for the opcode. Opcodes have between one and three operands. In this example the #$FF is the operand:</p>

<pre>
  .org $8000
MyFunction:
  LDA #$FF
  JMP MyFunction
</pre>

<h3>Comments</h3>

<p>Comments are to help you understand in English what the code is doing. When you write code and come back later, the comments will save you. You do not need a comment on every line, but should have enough to explain what is happening. Comments start with a ; and are completely ignored by the assembler. They can be put anywhere horizontally, but are usually spaced beyond the long lines.</p>

<pre>
  .org $8000
MyFunction:        ; loads FF into accumulator
  LDA #$FF
  JMP MyFunction
</pre>

<h3>Common Opcodes</h3>

<table border='1'>
  <tr><th colspan="2">Load/Store opcodes</th></tr>

  <tr><td width='100'>LDA #$0A</td><td>LoaD the value 0A into the accumulator A. The number part of the opcode can be a value or an address. If the value is zero, the zero flag will be set.</td></tr>
  <tr><td>LDX $0000</td><td>LoaD the value at address $0000 into the index register X. If the value is zero, the zero flag will be set.</td></tr>
  <tr><td>LDY #$FF </td><td>LoaD the value $FF into the index register Y. If the value is zero, the zero flag will be set.</td></tr>
  <tr><td>STA $2000</td><td>STore the value from accumulator A into the address $2000. The number part must be an address.</td></tr>
  <tr><td>STX $4016</td><td>STore value in X into $4016. The number part must be an address.</td></tr>
  <tr><td>STY $0101</td><td>STore Y into $0101. The number part must be an address.</td></tr>
  <tr><td>TAX      </td><td>Transfer the value from A into X. If the value is zero, the zero flag will be set.</td></tr>
  <tr><td>TAY      </td><td>Transfer A into Y. If the value is zero, the zero flag will be set.</td></tr>
  <tr><td>TXA      </td><td>Transfer X into A. If the value is zero, the zero flag will be set.</td></tr>
  <tr><td>TYA      </td><td>Transfer Y into A. If the value is zero, the zero flag will be set.</td></tr>

  <tr><th colspan="2">Math opcodes</th></tr>

  <tr><td width='100'>ADC #$01 </td><td>ADd with Carry. A = A + $01 + carry. If the result is zero, the zero flag will be set</td></tr>
  <tr><td>SBC #$80 </td><td>SuBtract with Carry. A = A - $80 - (1 - carry). If the result is zero, the zero flag will be set</td></tr>
  <tr><td>CLC      </td><td>CLear Carry flag in status register. Usually this should be done before ADC</td></tr>
  <tr><td>SEC      </td><td>SEt Carry flag in status register. Usually this should be done before SBC</td></tr>
  <tr><td>INC $0100</td><td>INCrement value at address $0100. If the result is zero, the zero flag will be set</td></tr>
  <tr><td>DEC $0001</td><td>DECrement $0001. If the result is zero, the zero flag will be set</td></tr>
  <tr><td>INY      </td><td>INcrement Y register. If the result is zero, the zero flag will be set</td></tr>
  <tr><td>INX      </td><td>INcrement X register. If the result is zero, the zero flag will be set</td></tr>
  <tr><td>DEY      </td><td>DEcrement Y. If the result is zero, the zero flag will be set</td></tr>
  <tr><td>DEX      </td><td>DEcrement X. If the result is zero, the zero flag will be set</td></tr>
  <tr><td>ASL A    </td><td>Arithmetic Shift Left. Shift all bits one position to the left. This is a multiply by 2. If the result is zero, the zero flag will be set</td></tr>
  <tr><td>LSR $6000</td><td>Logical Shift Right. Shift all bits one position to the right. This is a divide by 2. If the result is zero, the zero flag will be set</td></tr>

  <tr><th colspan="2">Comparison opcodes</th></tr>

  <tr><td width='100'>CMP #$01 </td><td>CoMPare A to the value $01. This actually does a subtract, but does not keep the result. Instead you check the status register to check for equal, . Less than, or greater than</td></tr>
  <tr><td>CPX $0050</td><td>ComPare X to the value at address $0050</td></tr>
  <tr><td>CPY #$FF </td><td>ComPare Y to the value $FF</td></tr>

  <tr><th colspan="2">Control-Flow opcodes</th></tr>
  
  <tr><td width='100'>JMP $8000</td><td>JuMP to $8000, continue running code there</td></tr>
  <tr><td>BEQ $FF00</td><td>Branch if EQual, contnue running code there. First you would do a CMP, which clears or sets the zero flag. Then the BEQ will check the zero flag. If zero is set (values were equal) the code jumps to $FF00 and runs there. If zero is clear (values not equal) there is no jump, runs next instruction</td></tr>
  <tr><td>BNE $FF00</td><td>Branch if Not Equal - opposite above, jump is made when zero flag is clear</td></tr>
</table>

<h3>Compare</h3>

<p>The compare instructions set or clear three of the status flags (Carry, Zero, and Negative) that can be tested with branch instructions, without altering the contents of the operand. There are three types of compare instructions: </p>

<table border="1">
  <tr><td align="center">Instruction</td><td align="center">Description</td></tr>
  <tr><td>CMP</td><td><u>C</u>o<u>mp</u>are Memory and Accumulator</td></tr>
  <tr><td>CPX</td><td><u>C</u>om<u>p</u>are Memory and Index<u>X</u></td></tr> 
  <tr><td>CPY</td><td><u>C</u>om<u>p</u>are Memory and Index <u>Y</u></td></tr>
</table>

<p>The CMP instruction supports eight different addressing modes, the same ones supported by the ADC and SBC instructions. Since the X and Y registers function primarily as counters and indexes, the CPX and CPY instructions do not require this elaborate addressing capability and operate with just three addressing modes (immediate, absolute, and zero page). </p>

<p>The compare instructions subtract (without carry) an immediate value or the contents of a memory location from the addressed register, but do not save the result in the register. The only indications of the results are the states of the three status flags: Negative (N), Zero (Z), and Carry (C). The combination of these three flags indicate whether the register contents are less than, equal to (the same as), or greater than the operand "data" (the immediate value or contents of the addressed memory location. The table below summarizes the result indicators for the compare instructions. </p>

<table border="1">
  <tr><td>Compare Result</td>         <td>N</td><td>Z</td><td>C</td></tr>
  <tr><td>A, X, or Y &lt; Memory</td> <td>*</td><td>0</td><td>0</td></tr>
  <tr><td>A, X, or Y = Memory</td>    <td>0</td><td>1</td><td>1</td></tr>
  <tr><td>A, X, or Y &gt; Memory</td> <td>*</td><td>0</td><td>1</td></tr>
</table>

<p>The compare instructions serve only one purpose; they provide information that can be tested by a subsequent branch instruction. For example, to branch if the contents of a register are less than an immediate or memory value, you would follow the compare instruction with a Branch on Carry Clear (BCC) instruction, as shown by the following: </p>

<h3>Comparing Memory to the Accumulator</h3>

<pre>
  CMP  $20    ; Accumulator less than location $20?
  BCC  THERE
HERE:
  ; No, continue execution here.
THERE:
  ; Execute this if Accumulator is less than location $20.
</pre>

<h3>Use of Branch Instructions with Compare</h3>

<table border="1">
  <tr><td rowspan="2" align="center">To Branch If</td><td colspan="2" align="center">Follow compare instruction with</td></tr>
  <tr><td>For unsigned numbers</td><td>For signed numbers</td></tr>
  <tr><td>Register is less than data</td><td>BCC  THERE</td><td>BMI  THERE</td></tr>
  <tr><td>Register is equal to data</td><td>BEQ  THERE</td><td>BEQ  THERE</td></tr>
  <tr><td>Register is greater than data</td><td>BEQ  HERE<br>BCS  THERE</td><td>BEQ  HERE<br>BPL  THERE</td></tr>
  <tr><td>Register is less than or equal to data</td><td>BCC  THERE<br>BEQ  THERE</td><td>BMI THERE<br>BEQ THERE</td></tr>
  <tr><td>Register is greater than or equal to data</td><td>BCS  THERE</td><td>BPL  THERE</td></tr>
</table>

<h3>Controller Ports</h3>

<p>The controllers are accessed through memory port addresses $4016 and $4017. First you have to write the value $01 then the value $00 to port $4016. This tells the controllers to latch the current button positions. Then you read from $4016 for first player or $4017 for second player. The buttons are sent one at a time, in bit 0. If bit 0 is 0, the button is not pressed. If bit 0 is 1, the button is pressed.</p>
<p>Button status for each controller is returned in the following order: A, B, Select, Start, Up, Down, Left, Right.</p>

<pre>
LDA #$01
STA $4016
LDA #$00
STA $4016     ; tell both the controllers to latch buttons

LDA $4016     ; player 1 - A(1)
LDA $4016     ; player 1 - B(2)
LDA $4016     ; player 1 - Select(4)
LDA $4016     ; player 1 - Start(8)
LDA $4016     ; player 1 - Up(16)
LDA $4016     ; player 1 - Down(32)
LDA $4016     ; player 1 - Left(64)
LDA $4016     ; player 1 - Right(128)

LDA $4017     ; player 2 - A
LDA $4017     ; player 2 - B
LDA $4017     ; player 2 - Select
LDA $4017     ; player 2 - Start
LDA $4017     ; player 2 - Up
LDA $4017     ; player 2 - Down
LDA $4017     ; player 2 - Left
LDA $4017     ; player 2 - Right
</pre>

<h3>Nes Palette Codes</h3>

<table border="1" cellpadding="5">
  <tr>
    <td data-nes="0x00" style="background:rgb(124,124,124);">00</td>
    <td data-nes="0x01" style="background:rgb(0,0,252);">01</td>
    <td data-nes="0x02" style="background:rgb(0,0,188);">02</td>
    <td data-nes="0x03" style="background:rgb(68,40,188);">03</td>
    <td data-nes="0x04" style="background:rgb(148,0,132);">04</td>
    <td data-nes="0x05" style="background:rgb(168,0,32);">05</td>
    <td data-nes="0x06" style="background:rgb(168,16,0);">06</td>
    <td data-nes="0x07" style="background:rgb(136,20,0);">07</td>
    <td data-nes="0x08" style="background:rgb(80,48,0);">08</td>
    <td data-nes="0x09" style="background:rgb(0,120,0);">09</td>
    <td data-nes="0x0A" style="background:rgb(0,104,0);">0A</td>
    <td data-nes="0x0B" style="background:rgb(0,88,0);">0B</td>
    <td data-nes="0x0C" style="background:rgb(0,64,88);">0C</td>
    <td data-nes="0x0D" style="background:rgb(0,0,0);">0D</td>
    <td data-nes="0x0E" style="background:rgb(0,0,0);">0E</td>
    <td data-nes="0x0F" style="background:rgb(0,0,0);">0F</td>
  </tr>
  <tr>
    <td data-nes="0x10" style="background:rgb(188,188,188);">10</td>
    <td data-nes="0x11" style="background:rgb(0,120,248);">11</td>
    <td data-nes="0x12" style="background:rgb(0,88,248);">12</td>
    <td data-nes="0x13" style="background:rgb(104,68,252);">13</td>
    <td data-nes="0x14" style="background:rgb(216,0,204);">14</td>
    <td data-nes="0x15" style="background:rgb(228,0,88);">15</td>
    <td data-nes="0x16" style="background:rgb(248,56,0);">16</td>
    <td data-nes="0x17" style="background:rgb(228,92,16);">17</td>
    <td data-nes="0x18" style="background:rgb(172,124,0);">18</td>
    <td data-nes="0x19" style="background:rgb(0,184,0);">19</td>
    <td data-nes="0x1A" style="background:rgb(0,168,0);">1A</td>
    <td data-nes="0x1B" style="background:rgb(0,168,68);">1B</td>
    <td data-nes="0x1C" style="background:rgb(0,136,136);">1C</td>
    <td data-nes="0x1D" style="background:rgb(0,0,0);">1D</td>
    <td data-nes="0x1E" style="background:rgb(0,0,0);">1E</td>
    <td data-nes="0x1F" style="background:rgb(0,0,0);">1F</td>
  </tr>
  <tr>
    <td data-nes="0x20" style="background:rgb(248,248,248);">20</td>
    <td data-nes="0x21" style="background:rgb(60,188,252);">21</td>
    <td data-nes="0x22" style="background:rgb(104,136,252);">22</td>
    <td data-nes="0x23" style="background:rgb(152,120,248);">23</td>
    <td data-nes="0x24" style="background:rgb(248,120,248);">24</td>
    <td data-nes="0x25" style="background:rgb(248,88,152);">25</td>
    <td data-nes="0x26" style="background:rgb(248,120,88);">26</td>
    <td data-nes="0x27" style="background:rgb(252,160,68);">27</td>
    <td data-nes="0x28" style="background:rgb(248,184,0);">28</td>
    <td data-nes="0x29" style="background:rgb(184,248,24);">29</td>
    <td data-nes="0x2A" style="background:rgb(88,216,84);">2A</td>
    <td data-nes="0x2B" style="background:rgb(88,248,152);">2B</td>
    <td data-nes="0x2C" style="background:rgb(0,232,216);">2C</td>
    <td data-nes="0x2D" style="background:rgb(120,120,120);">2D</td>
    <td data-nes="0x2E" style="background:rgb(0,0,0);">2E</td>
    <td data-nes="0x2F" style="background:rgb(0,0,0);">2F</td>
  </tr>
  <tr>
    <td data-nes="0x30" style="background:rgb(252,252,252);">30</td>
    <td data-nes="0x31" style="background:rgb(164,228,252);">31</td>
    <td data-nes="0x32" style="background:rgb(184,184,248);">32</td>
    <td data-nes="0x33" style="background:rgb(216,184,248);">33</td>
    <td data-nes="0x34" style="background:rgb(248,184,248);">34</td>
    <td data-nes="0x35" style="background:rgb(248,164,192);">35</td>
    <td data-nes="0x36" style="background:rgb(240,208,176);">36</td>
    <td data-nes="0x37" style="background:rgb(252,224,168);">37</td>
    <td data-nes="0x38" style="background:rgb(248,216,120);">38</td>
    <td data-nes="0x39" style="background:rgb(216,248,120);">39</td>
    <td data-nes="0x3A" style="background:rgb(184,248,184);">3A</td>
    <td data-nes="0x3B" style="background:rgb(184,248,216);">3B</td>
    <td data-nes="0x3C" style="background:rgb(0,252,252);">3C</td>
    <td data-nes="0x3D" style="background:rgb(216,216,216);">3D</td>
    <td data-nes="0x3E" style="background:rgb(0,0,0);">3E</td>
    <td data-nes="0x3F" style="background:rgb(0,0,0);">3F</td>
  </tr>
</table> 