<pre>
add_text(&lietal, "<b>Lietal</b> is written from left to right with implicit neutrality, singularity and at the present tense.");
add_text(&lietal, "For the most part, its <b>6 vowels and 9 consonants</b> are voiced similarly to their " SEND(english_path) " equivalents. Sustained vowels, such as \"<i >ä</i>\", are indicated with the trema. The Lietal \"<i >e</i>\" is very short, a barely audible junction between two consonants.");
// add_table(&lietal, "I /i/ | l<b>ea</b>ves      | Y /ɨ/ | journ<b>ey</b>     | E /e/ | n<b>e</b>ver");
// add_table(&lietal, "A /ə/ | hex<b>a</b>gram    | O /ɔ/ | aut<b>o</b>mobile  | U /u/ | n<b>ew</b>");
// add_table(&lietal, "K [k] | <b>k</b>iss        | T [t] | ti<b>t</b>le       | D [d] | <b>d</b>evice");
// add_table(&lietal, "R [ʁ] | retu<b>r</b>n      | S [s] | <b>s</b>ymphony    | L [l] | <b>l</b>igature");
// add_table(&lietal, "J [ʐ] | mena<b>g</b>erie   | V [v] | <b>v</b>ideo       | F [f] | <b>f</b>estival");
add_header(&lietal, "Phonology");
add_text(&lietal, "Building words from Lietal's phonemes is called <b>Childspeak</b>. It makes for long rhythmical and syllabic words, its main usage is in loan words and to express of emphasis or exclamation. This documentation uses the phonetically denser form <b>Adultspeak</b> where patterns of duplicated consonants and vowels are condensed.");
// add_table(&lietal, "CVCV | <b>lili</b> > ïl | <b>falili</b> > afïl | <b>fafalili</b> > äfïl");
// add_table(&lietal, "CVCv | <b>lila</b> > ila | <b>falila</b> > afila | <b>fafolila</b> > afoila");
// add_table(&lietal, "CVcV | <b>viki</b> > ïvek | <b>faviki</b> > afïvek | <b>fafoviki</b> > afoïvek");
// add_table(&lietal, "CVcv | <b>lika</b> > ileka | <b>falika</b> > afileka | <b>favolika</b> > afevoileka");
add_text(&lietal, "A single syllable of childspeak is reversed, so \"vo\" becomes <b>ov</b>. A sequence of consonant, like \"lyla\", is condensed into <b>yla</b>. A sequence of vowels, like \"lara\", is condensed into <b>äler</b>, in which an additional short \"<i >e</i>\" is added inbetween the two consonants.");
add_text(&lietal, "When no sequence of consonants or vowels are present, an extra vowel is also added between the consonants, so \"lira\", is transformed into <b>ilera</b>.");
add_header(&lietal, "Morphology");
add_text(&lietal, "Lietal words are built from the combination of the <b>9 Elementary Particles</b>, and each one contains a <i >consonant & a vowel</i>.");
// add_table(&lietal, "           | <b>Directional</b>               | <b>Perspectival</b>              | <b>Mechanical</b>");
// add_table(&lietal, "<b>Objective</b>   | Ky <b>traverse</b>-type | Ty <b>state</b>-type | Dy <b>scale</b>-type");
// add_table(&lietal, "<b>Observative</b> | Ry <b>direction</b>-type | Sy <b>relation</b>-type | Ly <b>counter</b>-type");
// add_table(&lietal, "<b>Subjective</b>  | Jy <b>modality</b>-type | Vy <b>alignment</b>-type | Fy <b>action</b>-type");
add_text(&lietal, "<b>Words are not created, but found</b> among the permutations of the nine elementary particles, making for a total of <b>27 Elementary Constructs</b>. These elementary constructs can be combined with each other, to create more complex ideas.");
// add_table(&lietal, "           | <b>Directional</b>          | <b>Perspectival</b>         | <b>Mechanical</b>");
// add_table(&lietal, "<b>Objective</b>   | <b>KY traverse</b> | <b>TY state</b> | <b>DY scale</b>");
// add_table(&lietal, "           | • <b>Ki</b> parent  | • <b>Ti</b> psychologic  | • <b>Di</b> complex");
// add_table(&lietal, "           | • <b>Ka</b> location  | • <b>Ta</b> phisionomic  | • <b>Da</b> organic");
// add_table(&lietal, "           | • <b>Ko</b> child  | • <b>To</b> physic  | • <b>Do</b> synthetic");
// add_table(&lietal, "<b>Observative</b> | <b>RY direction</b> | <b>SY relation</b> | <b>LY counter</b>");
// add_table(&lietal, "           | • <b>Ri</b> outward  | • <b>Si</b> unit  | • <b>Li</b> multiple");
// add_table(&lietal, "           | • <b>Ra</b> position  | • <b>Sa</b> together  | • <b>La</b> single");
// add_table(&lietal, "           | • <b>Ro</b> inward  | • <b>So</b> separate  | • <b>Lo</b> none");
// add_table(&lietal, "<b>Subjective</b>  | <b>JY modality</b> | <b>VY alignment</b> | <b>FY action</b>");
// add_table(&lietal, "           | • <b>Ji</b> definitive  | • <b>Vi</b> positive  | • <b>Fi</b> to do");
// add_table(&lietal, "           | • <b>Ja</b> possible  | • <b>Va</b> unknown  | • <b>Fa</b> to see");
// add_table(&lietal, "           | • <b>Jo</b> impossible  | • <b>Vo</b> negative  | • <b>Fo</b> to be");
add_text(&lietal, "For example, <b>aferi</b>(to show), is built of the elementary constructs <b>af</b>(to see) and <b>ir</b>(outward). The word for dictionary is <b>Äselodeta</b>, which literally means <i >a collection of words</i>, built from <b>as</b>(together) and <b>alodeta</b>(word).");
add_text(&lietal, "The <b>leading syllable determines a word's type</b>, for example, <b>aferi</b> inherits the action-type from <b>af</b>(to see), therefore anything that begins with <b>af</b> can be assumed to be an action word relating to sight.");
// add_table(&lietal, "<b>fo</b>     | of     | to be      | <b>la</b>     | al     | single");
// add_table(&lietal, "<b>fori</b>   | oferi   | to go    | <b>laro</b>   | alero   | i");
// add_table(&lietal, "<b>foriko</b> | ofireko | to enter  | <b>laroko</b> | alörek | my");

Term asodeky = create_term("asodeky", "The Asodeky, is the advanced Lietal language guide.");
set_parent(&asodeky, &lietal);
add_text(&asodeky, "The order of words <b>follows the table of Elementary Particles</b>. In a typical sentence, <b>traverse</b>-type(\"k\") words will be found at the beginning, and <b>action</b>-type(\"f\") words, at the end.");
add_text(&asodeky, "The following sequence of letters is the normal flow of a sentence, <b>when a sentence must break the word order, commas are used</b>. Notice the word order in the following sentence, and specifically how a comma is used to join two sentences that would normaly break the word order.");
// add_table(&asodeky, "K | T | D | R | S | L | J | V | F");
// add_list(&asodeky, "<b>Okïder aki oferi</b>, \"I am going home soon.\"");
// add_list(&asodeky, "<b>akodeti oreka, aki oferi</b>, \"I am going home, from the library.\"");
add_header(&asodeky, "Reference");
add_text(&asodeky, "<b>Traverse</b>-type words are meant to navigate a hierarchy, and are often used at the beginning of a sentence. To be <i >at a place</i>, in Lietal, is made explicit with the \"ak\" marker, like <b>ak arodeti</b> for \"<i >at school</i>\", and <b>ok arodeti</b> for \"<i >in school</i>\".");
// add_list(&asodeky, "<b>Ak odaki, okïder ilero ofïrek</b>, \"We are at the house, we are leaving soon\".");
add_text(&asodeky, "<b>State</b>-type words are meant to define the state of existence of something. Where <b>it</b> will speak of the idea, or concept of a thing, <b>at</b> will speak of the shape of a thing, and <b>ot</b> will speak of the thing itself. The difference can be better explained when used in an action, or with the examples: <b>ïfet</b>(to imagine), <b>ifeta</b>(to design) & <b>ifeto</b>(to build).");
add_text(&asodeky, "<b>Scale</b>-type words are used to define things that are made <b>od</b>(machines, products), from life-itself <b>ad</b>(fauna, flora) and from things that makes life <b>id</b>(time, space).");
// add_list(&asodeky, "<b>Aki ïder of</b>, \"I will be at home\"");
// add_list(&asodeky, "<b>Aleri ïder af</b>, \"I will see you later\"");
add_text(&asodeky, "<b>Direction</b>-type words are used to change the attributes of a concept, to transition toward something other or to create a conceptual arrow.");
add_text(&asodeky, "<b>Relation</b>-type words will most often be used as particles to create the equivalence of English particles \"<i >and</i>\" and \"<i >with</i>\", or to create enumerations.");
// add_list(&asodeky, "<b>Äkes aleri alero</b>, \"Between you and I\"");
add_text(&asodeky, "<b>Counter</b>-type words are often used to create subject pronouns, or parts of larger concepts like months in a year, or an item in a series. A sentence, by default, is expected to be <b>at the 1st person</b>, if a pronoun has not already been declared, pronouns are often omitted when possible. The basic Lietal singular pronouns are <b>aleri</b>(you), <b>äler</b>(he she), <b>alero</b>(i). The basic plural pronouns are <b>ïler</b>(yous), <b>ilera</b>(they), <b>ilero</b>(we).");
// add_list(&asodeky, "<b>Alero oferi</b>, \"I am going\"");
// add_list(&asodeky, "<b>Ilera oferi</b>, \"They are going\"");
add_text(&asodeky, "<b>Modality</b>-type words are usually used to create words like \"couldn't\", \"could\", \"must\", or <b>ojefy</b>, <b>ajefy</b>, <b>ijefy</b>.");
// add_list(&asodeky, "<b>Ijefy ävek oferi</b>, \"Where must I go?\"");
// add_list(&asodeky, "<b>Ajefy äved of</b>, \"Who might you be?\"");
add_text(&asodeky, "<b>Alignment</b>-type words are used to express a standing on a specific topic, for example, to express that something is wanted or not. Many of the daily expressions of greetings are also created from <b>iv</b>, for example, <b>ivero</b>(welcome) is made from <b>iv</b>(positive) & <b>or</b>(inward). This pattern can be expanded to mean things like <b>ïvef</b>(well done), or even <b>iveda</b>(health).");
// add_list(&asodeky, "<b>Ivero avefy?</b>, \"Hello, how are you?\"");
// add_list(&asodeky, "<b>ïver, okïder af!</b>, \"Good Bye, see you soon!\"");
add_text(&asodeky, "<b>Action</b>-type words are usually used at the end of a sentence and are generally built from the <i >fy</i> family. The sentence \"I take the book home\" is translated to <b>ok otodeta aki ifero</b>, following the <code >K T F</code> structure. Or another example, \"I give you the book\", could be translated to <b>ok otodeta aleri ïfer</b>, following the <code >K T L F</code> structure.");
// add_list(&asodeky, "<b>Lietal aj afeti?</b>, \"Can you understand Lietal?\".");
// add_list(&asodeky, "<b>Ok aki afivero</b>, \"I welcome you home\".");

</pre>