<h3>Installation</h3>

<p>Compile this source with the compiler for your platform, if you are using an ARM device:</p>

<pre>5c clock.c && 5l -o clock clock.c</pre>

<p>If you want to install globally, copy the source into <code>/sys/src/cmd/clock.c</code> and type <code>mk install</code> inside of <code>/sys/src/cmd</code>, to recompile all the applications found in the cmd directory.</p>

<pre>
acme /sys/src/cmd/clock.c
cd /sys/src/cmd
mk install
mk clean
</pre>

<h3>Source</h3>

<pre>
#include &lt;u.h&gt;
#include &lt;libc.h&gt;
#include &lt;draw.h&gt;
#include &lt;event.h&gt;

Image *secclr;

Point
circlept(Point c, int r, int degrees)
{
	double rad = (double) degrees * PI/180.0;

	c.x += cos(rad)*r;
	c.y -= sin(rad)*r;
	return c;
}

void 
lineb(Image *dst, Point p0, Point p1, Image *src, Point sp) 
{
	int dx = abs(p1.x - p0.x), sx = p0.x < p1.x ? 1 : -1;
	int dy = -abs(p1.y - p0.y), sy = p0.y < p1.y ? 1 : -1;
	int err = dx + dy, e2;

	for(;;){
		draw(screen, Rect(p0.x, p0.y, p0.x+1,p0.y+1), src, nil, ZP);
		if(p0.x == p1.x && p0.y == p1.y) break;
		e2 = 2 * err;
		if(e2 >= dy) { err += dy; p0.x += sx; }
		if(e2 <= dx) { err += dx; p0.y += sy; }
	}
}

void
redrawface(Image *screen)
{
	Rectangle r = screen->r;
	Point c = divpt(addpt(r.min, r.max), 2);
	int rad = ((Dx(r) < Dy(r) ? Dx(r) : Dy(r))/2)-20;

	draw(screen, screen->r, display->black, nil, ZP);
	for(int i=0; i<60; i++){
		int len = i % 15 == 0 ? rad *0.8 : i % 5 == 0 ? rad *0.85 : rad*0.9;
		lineb(screen, 
			circlept(c, len, i*6), 
			circlept(c, rad, i*6), 
			display->white, ZP);
	}
}

void
redrawtime(Image *screen)
{
	Tm tms = *localtime(time(0));
	int anghr = 90-(tms.hour*5 + tms.min/12)*6;
	int angmin = 90-tms.min*6;
	int angsec = 90-tms.sec*6;
	int angsecrev = 270-tms.sec*6;
	Rectangle r = screen->r;
	Point c = divpt(addpt(r.min, r.max), 2);
	int rad = ((Dx(r) < Dy(r) ? Dx(r) : Dy(r))/2)-20;
	int limit = (rad*4)/5;

	fillellipse(screen, c, limit, limit, display->black, ZP);
	lineb(screen, c, circlept(c, (rad*3)/4, angmin), display->white, ZP);
	lineb(screen, c, circlept(c, rad/2, anghr), display->white, ZP);
	lineb(screen, c, circlept(c, limit-1, angsec), secclr, ZP);
	lineb(screen, c, circlept(c, (rad)/5, angsecrev), secclr, ZP);
	fillellipse(screen, c, 2, 2, secclr, ZP);
	flushimage(display, 1);
}

void
eresized(int new)
{
	if(new && getwindow(display, Refnone) < 0)
		fprint(2,"can't reattach to window");
	redrawface(screen);
	redrawtime(screen);
}

void
main(int, char**)
{
	Event e;
	Mouse m;
	Menu menu;
	char *mstr[] = {"exit", 0};
	int key, timer, t;

	if (initdraw(0, 0, "clock") < 0)
		sysfatal("initdraw failed");

	secclr = allocimagemix(display, DRed, DRed);

	eresized(0);
	einit(Emouse);

	t = 1000;
	timer = etimer(0, t);
	menu.item = mstr;
	menu.lasthit = 0;

	for(;;) {
		key = event(&e);
		if(key == Emouse) {
			m = e.mouse;
			if(m.buttons & 4) {
				if(emenuhit(3, &m, &menu) == 0)
					exits(0);
			}
		} else if(key == timer) {
			redrawtime(screen);
		}
	}	
}
</pre>
